""" doctesting for 7-base_geometry """
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> print(bg.area())
Traceback (most recent call last):
...
Exception: area() is not implemented
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("my_neg_int", -12)
Traceback (most recent call last):
...
ValueError: my_neg_int must be greater than 0
>>> bg.integer_validator("my_zero_int", 0)
Traceback (most recent call last):
...
ValueError: my_zero_int must be greater than 0
>>> bg.integer_validator("string", "not an int")
Traceback (most recent call last):
...
TypeError: string must be an integer
>>> bg.integer_validator("float", 4.28)
Traceback (most recent call last):
...
TypeError: float must be an integer
>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer
>>> bg.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
...
TypeError: dict must be an integer
>>> bg.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: list must be an integer
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("name")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional arguments: 'value'