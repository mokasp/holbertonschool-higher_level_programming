""" doctesting for 7-base_geometry """
""" IMPORT AND ASSIGN CLASS """
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
""" AREA """
""" CORRECT INPUT """
>>> print(bg.area())
Traceback (most recent call last):
...
Exception: area() is not implemented
""" INTEGER_VALIDATOR """
""" CORRECT INPUT """
>>> bg.integer_validator("my_int", 12)
""" ARGUMENT COUNT """
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("name")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator("name", 12, "extra")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
""" INCORRECT INPUT """
>>> bg.integer_validator("my_neg_int", -12)
Traceback (most recent call last):
...
ValueError: my_neg_int must be greater than 0
>>> bg.integer_validator("my_zero_int", 0)
Traceback (most recent call last):
...
ValueError: my_zero_int must be greater than 0
>>> bg.integer_validator("string", "not an int")
Traceback (most recent call last):
...
TypeError: string must be an integer
>>> bg.integer_validator("string", "not an int")
Traceback (most recent call last):
...
TypeError: string must be an integer
>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer
